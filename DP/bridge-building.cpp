/**
 * –í –¥–µ—Ä–µ–≤–Ω–µ –ì–∞–¥—é–∫–∏–Ω–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –∏–¥—É—Ç –ø—Ä–æ–ª–∏–≤–Ω—ã–µ –¥–æ–∂–¥–∏, –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —á–µ–≥–æ —Ä–µ—á–∫–∞ –í–æ–Ω—é—á–∫–∞, –∫–æ—Ç–æ—Ä—É—é –æ–±—ã—á–Ω–æ –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–∞–≥–Ω—É—Ç—å, –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ –±–µ—Ä–µ–≥–æ–≤. –ß—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–µ—Ä–µ–π—Ç–∏ —Ä–∞–∑–ª–∏–≤—à—É—é—Å—è —Ä–µ–∫—É, –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –ø–ª–∞–≤—É—á–∏–π –º–æ—Å—Ç –∏–∑ –±—Ä–µ–≤–µ–Ω, –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –æ—Ç —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –±–∞–Ω–∏ –±–∏–∑–Ω–µ—Å–º–µ–Ω–∞, –ø–æ—Å–µ–ª–∏–≤—à–µ–≥–æ—Å—è –Ω–µ–ø–æ–¥–∞–ª–µ–∫—É.
 * –í—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –±—Ä–µ–≤–Ω–∞ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é —Ç–æ–ª—â–∏–Ω—É. –ü—Ä–∏ —ç—Ç–æ–º –µ—Å—Ç—å ùë• –±—Ä–µ–≤–µ–Ω –¥–ª–∏–Ω—ã ùëé –∏ ùë¶ –±—Ä–µ–≤–µ–Ω –¥–ª–∏–Ω—ã ùëè. –ü–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–æ—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ ùëô —Ä—è–¥–æ–≤, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Å—Ç–∞–≤–ª–µ–Ω –∏–∑ –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –±—Ä–µ–≤–µ–Ω. –ü–∏–ª–∏—Ç—å –±—Ä–µ–≤–Ω–∞ –Ω–µ–ª—å–∑—è, —Ç–∞–∫ –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–∏–ª–∞ —É—Ç–æ–Ω—É–ª–∞ –ø—Ä–∏ —Ä–∞–∑–ª–∏–≤–µ –í–æ–Ω—é—á–∫–∏.
 * –ì–ª–∞–≤–Ω—ã–π –∏–Ω–∂–µ–Ω–µ—Ä —Ö–æ—á–µ—Ç –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–æ—Å—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤–æ–∑–º–æ–∂–Ω–æ–π —à–∏—Ä–∏–Ω—ã, –ø—Ä–∏ —ç—Ç–æ–º —à–∏—Ä–∏–Ω–∞ –º–æ—Å—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —à–∏—Ä–∏–Ω–µ —Ä—è–¥–∞ –±—Ä–µ–≤–µ–Ω.
 * –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–æ—Å—Ç –∏–∑ —Å–µ–º–∏ —Ä—è–¥–æ–≤, –∏ –ø—Ä–∏ —ç—Ç–æ–º –µ—Å—Ç—å —à–µ—Å—Ç—å –±—Ä–µ–≤–µ–Ω –¥–ª–∏–Ω—ã 3 –∏ –¥–µ—Å—è—Ç—å –±—Ä–µ–≤–µ–Ω –¥–ª–∏–Ω—ã 2, —Ç–æ –º–æ–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–æ—Å—Ç —à–∏—Ä–∏–Ω—ã 5.
 */

#include <bits/stdc++.h>

using namespace std;

#define meow ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define repeat(i, n) for(int (i)=0; (i)<(n); (i)++)

signed main() {
    meow
    int x, a, y, b, l;
    cin >> x >> a >> y >> b >> l;
    int left = 0;
    int right = x * a + y * b + 1;
    while (right - left > 1) {
        vector<vector<int>> f(x + 1, vector<int>(y + 1));
        int width = (left + right) / 2;
        repeat(i, x + 1) {
            repeat(j, y + 1) {
                repeat(k, i + 1) {
                    int q = static_cast<int>(ceil(static_cast<double>(width - a * k) / b));
                    if (q < 0) {
                        q = 0;
                    }
                    if (q <= j) {
                        f[i][j] = max(f[i][j], f[i - k][j - q] + 1);
                    }
                }
            }
        }
        if (l <= f[x][y]) {
            left = width;
        } else {
            right = width;
        }
    }
    cout << left;
}