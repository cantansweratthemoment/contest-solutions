/**
 * –í–∞–º –¥–∞–Ω –±–∏–Ω–∞—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤‚Ä† –¥–ª–∏–Ω—ã ùëõ. –í–∞–º –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–∞–¥ –Ω–∏–º —Å–ª–µ–¥—É—é—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –Ω–µ –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–∞. –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º ‚Äî –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ª—é–±–æ–π —ç–ª–µ–º–µ–Ω—Ç –∏ –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ: –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å 0 –≤ 1 –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç.
 * –ö–∞–∫–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–≤–µ—Ä—Å–∏–π ‚Ä° –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –º–∞—Å—Å–∏–≤ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ –±–æ–ª–µ–µ –æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏?
 */

#include <iostream>
#include <vector>

using namespace std;

#define meow ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define repeat(i, n) for(int (i)=0; (i)<(n); (i)++)
#define int long long

int countInversions(const vector<int> &a) {
    int counter = 0;
    int oneCounter = 0;
    repeat(i, a.size()) {
        if (a[i] == 1) {
            oneCounter++;
        } else {
            counter += oneCounter;
        }
    }
    return counter;
}

signed main() {
    meow
    int t, n, ai;
    cin >> t;
    repeat(i, t) {
        cin >> n;
        vector<int> a;
        repeat(ii, n) {
            cin >> ai;
            a.push_back(ai);
        }
        int counter1, counter2, counter3;
        counter1 = countInversions(a);
        int index = 0;
        bool flag = false;
        repeat(ii, n) {
            if (a[ii] == 1) {
                index = ii;
                flag = true;
            }
        }
        if (flag) {
            a[index] = 0;
            counter2 = countInversions(a);
            a[index] = 1;
        } else {
            counter2 = INT_MIN;
        }
        repeat(ii, n) {
            if (a[ii] == 0) {
                a[ii] = 1;
                break;
            }
        }
        counter3 = countInversions(a);
        cout << max(max(counter1, counter2), counter3) << "\n";
    }
}