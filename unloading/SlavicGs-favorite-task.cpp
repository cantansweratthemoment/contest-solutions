/**
 * ะะฐะผ ะทะฐะดะฐะฝะพ ะฒะทะฒะตัะตะฝะฝะพะต ะดะตัะตะฒะพ ั ๐ ะฒะตััะธะฝะฐะผะธ. ะะตัะตะฒะพะผ ะฝะฐะทัะฒะฐะตััั ะฝะตะพัะธะตะฝัะธัะพะฒะฐะฝะฝัะน ัะฒัะทะฝัะน ะณัะฐั ะฑะตะท ัะธะบะปะพะฒ. ะะตัะตะฒะพ ัะฒะปัะตััั ะฒะทะฒะตัะตะฝะฝัะผ, ะตัะปะธ ะบะฐะถะดะพะผั ะตะณะพ ัะตะฑัั ัะพะฟะพััะฐะฒะปะตะฝะพ ัะธัะปะพ โ ะตะณะพ ะฒะตั. ะะตัะตะฒะพ ะฝะตะพัะธะตะฝัะธัะพะฒะฐะฝะพ, ะฝะต ัะพะดะตัะถะธั ะบะพัะฝั.
 * ะขะฐะบ ะบะฐะบ ะดะตัะตะฒัั ัะปะธัะบะพะผ ัะบััะฝั, ะฒั ัะตัะธะปะธ ะฟะพะฒะตัะตะปะธัั ัะตะฑั ะธะณัะพะน ะฝะฐ ะดะตัะตะฒะต.
 * ะะฐ ะพะดะธะฝ ัะพะด ะฒั ะผะพะถะตัะต ะฟะตัะตะผะตััะธัััั ะธะท ะฒะตััะธะฝั ะฒ ะปัะฑะพะณะพ ะตะณะพ ัะพัะตะดะฐ (ัะฐะบัั ะฒะตััะธะฝั, ะฒ ะบะพัะพััั ะตััั ัะตะฑัะพ ะธะท ัะตะบััะตะน).
 * ะั ะฝะฐัะธะฝะฐะตัะต ะธะณัั, ะธะผะตั ะทะฝะฐัะตะฝะธะต ะฟะตัะตะผะตะฝะฝะพะน ๐ฅ ัะฐะฒะฝะพะต 0. ะะพะณะดะฐ ะฒั ะฟะตัะตะผะตัะฐะตัะตัั ะฟะพ ัะตะฑัั ๐, ัะพ ๐ฅ ะธะทะผะตะฝัะตั ัะฒะพั ะทะฝะฐัะตะฝะธะต ะฝะฐ ๐ฅ ๐ท๐ฎ๐ฑ ๐ค๐ (ะณะดะต โ ๐ค๐ ะฒะตั ๐-ะณะพ ัะตะฑัะฐ).
 * ะะฐัะฐ ะทะฐะดะฐัะฐ ะฟัะพะนัะธ ะพั ะฒะตััะธะฝั ๐ ะดะพ ะฒะตััะธะฝั ๐, ะฝะพ ะฒั ะธะผะตะตัะต ะฟัะฐะฒะพ ะฒัะพะดะธัั ะฒ ะฒะตััะธะฝั ๐ ัะพะปัะบะพ ะตัะปะธ ๐ฅ ะฟะพัะปะต ััะพะณะพ ััะฐะฝะตั ัะฐะฒะฝะพ 0. ะััะณะธะผะธ ัะปะพะฒะฐะผะธ, ะฒั ะผะพะถะตัะต ะฟัะพะนัะธ ะฟะพ ัะตะฑัั ๐, ะบะพัะพัะพะต ะฒะตะดัั ะฒ ๐ ัะพะณะดะฐ ะธ ัะพะปัะบะพ ัะพะณะดะฐ, ะบะพะณะดะฐ ๐ฅ ๐ท๐ฎ๐ฑ ๐ค๐=0.
 * ะะฐะบ ัะพะปัะบะพ ะฒั ะฟะพะฟะฐะดะฐะตัะต ๐, ัะพ ะธะณัะฐ ะทะฐะบะฐะฝัะธะฒะฐะตััั ะฒะฐัะตะน ะฟะพะฑะตะดะพะน.
 * ะััั ะดะพะฟะพะปะฝะธัะตะปัะฝะพะต ะฟัะฐะฒะธะปะพ โ ะฝะต ะฑะพะปะตะต ะพะดะฝะพะณะพ ัะฐะทะฐ ะทะฐ ะธะณัั ะฒั ะผะพะถะตัะต ะฒะพัะฟะพะปัะทะพะฒะฐัััั ัะตะปะตะฟะพััะพะผ. ะะฝ ะฟะตัะตะผะตัะฐะตั ะฒะฐั ะผะณะฝะพะฒะตะฝะฝะพ ะฒ ะปัะฑัั ะฒะตััะธะฝั (ะพัะปะธัะฝัั ะพั ๐
 * ะั ะผะพะถะตัะต ะธัะฟะพะปัะทะพะฒะฐัั ัะตะปะตะฟะพัั ะธะท ะปัะฑะพะน ะฒะตััะธะฝั (ะดะฐะถะต ะธะท ๐).
 * ะัะฒะตะดะธัะต ยซYESยป, ะตัะปะธ ะฒั ะผะพะถะตัะต ะฟะพะฟะฐััั ะฒ ๐ ะธะท ๐. ะัะฒะตะดะธัะต ยซNOยป ะฒ ะฟัะพัะธะฒะฝะพะผ ัะปััะฐะต.
 */

#include <bits/stdc++.h>

using namespace std;

#define meow ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define repeat(i, n) for(int (i)=0; (i)<(n); (i)++)
#define int long long

struct entry {
    int v;
    int weight;

    entry(int v, int weight) {
        this->v = v;
        this->weight = weight;
    }
};

void DFSFromA(vector<vector<entry>> &graph, int i, vector<bool> &checked, int b, int x, set<int> &xors) {
    checked[i] = true;
    if (i == b) {
        return;
    }
    xors.insert(x);
    repeat(j, graph[i].size()) {
        if (!checked[graph[i][j].v]) {
            DFSFromA(graph, graph[i][j].v, checked, b, x ^ graph[i][j].weight, xors);
        }
    }
}

void DFSFromB(vector<vector<entry>> &graph, int i, vector<bool> &checked, int b, int x, set<int> &xors, bool &flag) {
    checked[i] = true;
    if (xors.find(x) != xors.end() && i != b) {
        flag = true;
        return;
    }
    repeat(j, graph[i].size()) {
        if (!checked[graph[i][j].v]) {
            DFSFromB(graph, graph[i][j].v, checked, b, x ^ graph[i][j].weight, xors, flag);
        }
    }
}

signed main() {
    meow
    int t, n, a, b, u, v, w;
    cin >> t;
    repeat(i, t) {
        cin >> n >> a >> b;
        vector<vector<entry>> graph(n);
        a--;
        b--;
        repeat(ii, n - 1) {
            cin >> u >> v >> w;
            u--;
            v--;
            graph[u].emplace_back(v, w);
            graph[v].emplace_back(u, w);
        }
        set<int> xors;
        vector<bool> checkedA(n, false);
        DFSFromA(graph, a, checkedA, b, 0, xors);
        vector<bool> checkedB(n, false);
        bool flag = false;
        DFSFromB(graph, b, checkedB, b, 0, xors, flag);
        if (flag) {
            cout << "YES\n";
        } else {
            cout << "NO\n";
        }
    }
}
