/**
 * –î–∞–Ω –Ω–∞–±–æ—Ä –ø–æ–¥–≤–µ—à–µ–Ω–Ω—ã—Ö –¥–µ—Ä–µ–≤—å–µ–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω—è—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:
 * 0 u v –î–ª—è –¥–≤—É—Ö –∑–∞–¥–∞–Ω–Ω—ã—Ö –≤–µ—Ä—à–∏–Ω ùë¢ –∏ ùë£ –≤—ã—è—Å–Ω–∏—Ç—å, –ª–µ–∂–∞—Ç –ª–∏ –æ–Ω–∏ –≤ –æ–¥–Ω–æ–º –¥–µ—Ä–µ–≤–µ. –ï—Å–ª–∏ —ç—Ç–æ —Ç–∞–∫, –≤—ã–≤–µ—Å—Ç–∏ –≤–µ—Ä—à–∏–Ω—É, —è–≤–ª—è—é—â—É—é—Å—è –∏—Ö –Ω–∞–∏–º–µ–Ω—å—à–∏–º –æ–±—â–∏–º –ø—Ä–µ–¥–∫–æ–º, –∏–Ω–∞—á–µ –≤—ã–≤–µ—Å—Ç–∏ 0.
 * 1 u v –î–ª—è –∫–æ—Ä–Ω—è ùë¢ –æ–¥–Ω–æ–≥–æ –∏–∑ –¥–µ—Ä–µ–≤—å–µ–≤ –∏ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π –≤–µ—Ä—à–∏–Ω—ã ùë£ –¥—Ä—É–≥–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–±—Ä–æ (ùë£,ùë¢).
 * –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —ç—Ç–∏ –¥–≤–∞ –¥–µ—Ä–µ–≤–∞ —Å–æ–µ–¥–∏–Ω—è—Ç—Å—è –≤ –æ–¥–Ω–æ.
 * –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ online, —Ç.–µ. –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω–∏–≤ –ø—Ä–µ–¥—ã–¥—É—â–∏–π.
 */

#include <bits/stdc++.h>

using namespace std;

#define meow ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define repeat(i, n) for(int (i)=0; (i)<(n); (i)++)

const int maxK = 20;
const int maxN = 60000;

vector<int> p;
vector<array<int, maxK>> dp(maxN);

int getDp(int v, int i) {
    if (dp[v][i] != -1) {
        return dp[v][i];
    }
    if (i == 0) {
        return -1;
    }
    int half = getDp(v, i - 1);
    if (half != -1) {
        dp[v][i] = getDp(half, i - 1);
    }
    return dp[v][i];
}

int getHeight(int v) {
    /*if (v == -1) {
        return -1;
    }*/
    int count = 0;
    for (int k = maxK - 1; k >= 0; k--) {
        if (getDp(v, k) != -1) {
            count += 1 << k;
            v = getDp(v, k);
        }
    }
    return count;
}

int getRoot(int v) {
    for (int k = maxK - 1; k >= 0; k--) {
        if (getDp(v, k) != -1) {
            v = getDp(v, k);
        }
    }
    return v;
}

int LCA(int u, int v) {
    if (getHeight(u) < getHeight(v)) {
        swap(u, v);
    }
    int heightV = getHeight(v);
    for (int k = maxK - 1; k >= 0; k--) {
        int dp = getDp(u, k);
        if ((dp != -1) && getHeight(dp) >= heightV) {
            u = getDp(u, k);
        }
    }
    if (u == v) {
        return u;
    }
    for (int k = maxK - 1; k >= 0; k--) {
        if (getDp(u, k) != getDp(v, k)) {
            u = getDp(u, k);
            v = getDp(v, k);
        }
    }
    return getDp(u, 0);
}

bool isSameTree(int u, int v) {
    int rootU = getRoot(u);
    int rootV = getRoot(v);
    return rootU == rootV;
}

signed main() {
    meow
    int n;
    cin >> n;
    p.resize(n + 1);
    int q;
    for (int i = 1; i <= n; i++) {
        cin >> q;
        if (q == 0) {
            p[i] = -1;
        } else {
            p[i] = q;
        }
    }
    for (int k = 0; k < maxK; k++) {
        for (int i = 0; i < maxN; i++) {
            dp[i][k] = -1;
        }
    }
    for (int i = 1; i <= n; i++) {
        dp[i][0] = p[i];
    }
    int k;
    cin >> k;
    int type, x, y, u, v;
    int ans = 0;
    repeat(i, k) {
        cin >> type >> x >> y;
        u = (x - 1 + ans) % n + 1;
        v = (y - 1 + ans) % n + 1;
        if (type == 0) {
            if (isSameTree(u, v)) {
                int lca = LCA(u, v);
                cout << lca << endl;
                ans = lca;
            } else {
                cout << 0 << endl;
                ans = 0;
            }
        } else {
            dp[u][0] = v;
        }
    }
}