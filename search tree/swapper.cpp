/*
 * –ü–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º –≤ —à—Ç–∞–±-–∫–≤–∞—Ä—Ç–∏—Ä—É –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏ –ê–∞–∑—É –∏ –°–∫–∏–≤—É –ø—Ä–∏—à–ª–æ—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ –º–µ—Å—Ç–Ω–æ–π —Ç–∞–º–æ–∂–Ω–µ –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—é –æ –¥–æ—Ö–æ–¥–∞—Ö –∑–∞ –≤—Ä–µ–º—è –≤–∏–∑–∏—Ç–∞. –ü–æ–ª—É—á–∏–ª–∞—Å—å –¥–æ–≤–æ–ª—å–Ω–æ –≤–Ω—É—à–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–∏—Å–µ–ª. –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ç–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–Ω—è–ª–∞ –≤–µ—Å—å–º–∞ –¥–æ–ª–≥–æ–µ –≤—Ä–µ–º—è.
 * ‚Äî –°–≤–æ–ø–ø–µ—Ä –∫—Ä–∏–≤–æ–π, ‚Äî —Å–æ –∑–Ω–∞–Ω–∏–µ–º –¥–µ–ª–∞ —Å–∫–∞–∑–∞–ª —Ç–∞–º–æ–∂–µ–Ω–Ω–∏–∫.
 * ‚Äî –ê —á—Ç–æ —Ç–∞–∫–æ–µ —Å–≤–æ–ø–ø–µ—Ä? ‚Äî —Å–ø—Ä–æ—Å–∏–ª –ª—é–±–æ–ø—ã—Ç–Ω—ã–π –°–∫–∏–≤.
 * –ê–∞–∑ –æ–±—ä—è—Å–Ω–∏–ª, —á—Ç–æ —Å–≤–æ–ø–ø–µ—Ä ‚Äî —ç—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä–∞—è —É–º–µ–µ—Ç –¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ.
 * –í–∑—è—Ç—å –æ—Ç—Ä–µ–∑–æ–∫ —á—ë—Ç–Ω–æ–π –¥–ª–∏–Ω—ã –æ—Ç ùë• –¥–æ ùë¶ –∏ –ø–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏ —á–∏—Å–ª–æ ùë• —Å ùë•+1, ùë•+2 —Å ùë•+3, –∏ —Ç.–¥.
 * –ü–æ—Å—á–∏—Ç–∞—Ç—å —Å—É–º–º—É —á–∏—Å–µ–ª –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º –æ—Ç—Ä–µ–∑–∫–µ –æ—Ç ùëé –¥–æ ùëè.
 * –£—á–∏—Ç—ã–≤–∞—è, —á—Ç–æ –æ–±—Å—á—ë—Ç –º–æ–∂–µ—Ç –∑–∞—Ç—è–Ω—É—Ç—å—Å—è –Ω–∞–¥–æ–ª–≥–æ, –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—è ¬´–ú–ò–§¬ª –ø–æ–ø—Ä–æ—Å–∏–ª–∞ –í–∞—Å —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Å–æ —Å–≤–æ–ø–ø–µ—Ä–æ–º –∏ –ø—Ä–æ–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞—Ç—å –≠–¢–û —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ.
 */

#include <bits/stdc++.h>

using namespace std;

#define meow ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define repeat(i, n) for(int (i)=0; (i)<(n); (i)++)
#define int long long

struct decartes {
    int x, y, size, sum;
    decartes *left, *right;

    decartes(int x) : x(x), y(rand()), left(nullptr), right(nullptr), size(1), sum(x) {}
};

int size(decartes *tree) {
    if (tree == nullptr) {
        return 0;
    } else {
        return tree->size;
    }
}

int sum(decartes *tree) {
    if (tree == nullptr) {
        return 0;
    } else {
        return tree->sum;
    }
}

decartes *update(decartes *tree) {
    if (tree == nullptr) {
        return tree;
    }
    tree->size = size(tree->left) + size(tree->right) + 1;
    tree->sum = sum(tree->left) + sum(tree->right) + tree->x;
    return tree;
}

decartes *merge(decartes *A, decartes *B) {
    if (A == nullptr) {
        return B;
    }
    if (B == nullptr) {
        return A;
    }
    if (A->y > B->y) {
        A->right = merge(update(A->right), update(B));
        return update(A);
    } else {
        B->left = merge(update(A), update(B->left));
        return update(B);
    }
}

pair<decartes *, decartes *> split(decartes *tree, int k) {
    if (tree == nullptr) {
        return {tree, tree};
    }
    if (k <= size(tree->left)) {
        auto splitTree = split(tree->left, k);
        tree->left = update(splitTree.second);
        return {update(splitTree.first), update(tree)};
    } else {
        auto splitTree = split(tree->right, k - size(tree->left) - 1);
        tree->right = update(splitTree.first);
        return {update(tree), update(splitTree.second)};
    }
}

void insert(decartes *&tree, int x) {
    tree = merge(tree, new decartes(x));
}

int getSum(int left, int right, decartes *&tree) {
    auto split1 = split(tree, left);
    auto split2 = split(split1.second, right - left + 1);
    int result = sum(split2.first);
    auto mergeTree = merge(split2.first, split2.second);
    merge(split1.first, mergeTree);
    return result;
}

void swap(int left, int right, decartes *&first, decartes *&second) {
    auto split1 = split(first, left / 2);
    auto split2 = split(split1.second, (right + 1) / 2 - left / 2);
    auto split3 = split(second, (left + 1) / 2);
    auto split4 = split(split3.second, right / 2 + 1 - (left + 1) / 2);
    first = merge(merge(split1.first, split4.first), split2.second);
    second = merge(merge(split3.first, split2.first), split4.second);
}

signed main() {
    meow
    int N, M;
    cin >> N >> M;
    int ii = 1;
    int command, a, b, sumResult;
    int q;
    while (!(N == 0 && M == 0)) {
        decartes *first = nullptr;
        decartes *second = nullptr;
        cout << "Swapper " << ii << ":\n";
        repeat(i, N) {
            cin >> q;
            if (i % 2 == 1) {
                insert(first, q);
            } else {
                insert(second, q);
            }
        }
        repeat(i, M) {
            cin >> command >> a >> b;
            a--;
            b--;
            if (command == 1) {
                swap(a, b, first, second);
            } else {
                sumResult = getSum(a / 2, (b + 1) / 2 - 1, first) + getSum((a + 1) / 2, b / 2, second);
                cout << sumResult << "\n";
            }
        }
        cin >> N >> M;
        cout << "\n";
        ii++;
    }
}